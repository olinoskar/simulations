import math
import random
import numpy as np
import functions as func
import tensorflow as tf
import tensorflow.keras as keras
from keras.models import Sequential
from keras import models as models
from keras.layers import Conv2D
from keras import layers as layers



DEFAULT_HIDDEN_LAYER_SIZE = 4
OUTPUT_LAYER_SIZE = 1
INPUTS = 5
NUMBER_OF_ACTIONS = 2


class Network2:
    def __init__(self, shape):
        self.L = len(shape)
        self.model = Sequential()
        for l in range(self.L - 1):
            self.model.add(Conv2D(1,
                                  3,
                                  strides=(1,1),
                                  padding="valid",
                                  activation="relu",
                                  input_dim=shape[l]))

    def print_network(self):
        print('\n\n--------------')
        for layer in model.layers:
            print(self.model.get_layer(index=l).get_weights())
            print('--------------')
        print('\n\n')

    def prop_forward(self, X):
        V = X

        for l in range(self.L - 1):
            # print(self.W[l])
            # print(V)
            # print(self.Theta[l])
            b = np.dot(self.W[l], V) - self.Theta[l]
            V = b
        return V

    def feed(self, X):
        V = self.prop_forward(X)
        return V

    def mutate(self, mutationrate, creeprate):
        for w in range(len(self.W)):
            self.W[w] = self.W[w] + creeprate * (2 * np.random.random(size=self.W[w].shape) - 1) * np.random.choice(
                [1, 0], p=[mutationrate, 1 - mutationrate])
        for t in range(len(self.Theta)):
            self.Theta[t] = self.Theta[t] + creeprate * (
                        2 * np.random.random(size=self.Theta[t].shape) - 1) * np.random.choice([1, 0], p=[mutationrate,
                                                                                                          1 - mutationrate])

        return


if __name__ == "__main__":
    a = [4, 4, 2]
    x = Network2(shape=a)
    x.print_network()




